#!/usr/bin/env bash

set -e

source $SNAP/actions/common/utils.sh

CURRENT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)

"$SNAP/microk8s-enable.wrapper" helm3

CILIUM_VERSION=""
INSTALL_CILIUM_CLI="True"

IPv4_CLUSTER_CIDR="10.32.0.0/16"
IPv4_SERVICE_CIDR="10.33.0.0/16"

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    --version)
      CILIUM_VERSION="$2"
      shift 2
      ;;
    --skip-cilium-cli)
      INSTALL_CILIUM_CLI="False"
      shift
      ;;
    *)
      echo "Invalid option: $1" >&2
      exit 1
      ;;
  esac
done

echo "Ensure kube-apiserver --allow-privileged=true flag"
if ! grep -qE -- "--allow-privileged=true" "$SNAP_DATA/args/kube-apiserver"; then
  echo "Adding kube-apiserver --allow-privileged=true flag"
  refresh_opt_in_config "allow-privileged" "true" kube-apiserver
  echo "Restarting kube-apiserver"
  restart_service apiserver
fi

echo "Ensure kube-controller-manager --cluster-cidr=$IPv4_CLUSTER_CIDR flag"
if ! grep -qE -- "--cluster-cidr=$IPv4_CLUSTER_CIDR" "$SNAP_DATA/args/kube-controller-manager"; then
  echo "Adding kube-controller-manager --allow-privileged=true flag"
  refresh_opt_in_config "cluster-cidr" "$IPv4_CLUSTER_CIDR" kube-controller-manager
  echo "Restarting kube-controller-manager"
  restart_service controller-manager
fi

set_service_not_expected_to_start flanneld
run_with_sudo preserve_env snapctl stop "${SNAP_NAME}.daemon-flanneld"
remove_vxlan_interfaces

echo "Ensure containerd cni bin_dir is OK"
if grep -qE "bin_dir.*SNAP}\/" "$SNAP_DATA"/args/containerd-template.toml; then
  echo "Configure cni bin dir"
  run_with_sudo "${SNAP}/bin/sed" -i 's;bin_dir = "${SNAP}/opt;bin_dir = "${SNAP_DATA}/opt;g' "$SNAP_DATA/args/containerd-template.toml"
  echo "Restarting containerd"
  run_with_sudo preserve_env snapctl restart "${SNAP_NAME}.daemon-containerd"
fi

# Disable Calico CNI
if [ -e "$SNAP_DATA/var/lock/ha-cluster" ] && [ -e "$SNAP_DATA/args/cni-network/cni.yaml" ]
then
  echo "Disabling Calico CNI"
  "$SNAP/microk8s-kubectl.wrapper" delete -f "$SNAP_DATA/args/cni-network/cni.yaml"
  # give a bit slack before moving the file out, sometimes it gives out this error "rpc error: code = Unknown desc = checkpoint in progress".
  sleep 2s
  run_with_sudo mv "$SNAP_DATA/args/cni-network/cni.yaml" "$SNAP_DATA/args/cni-network/cni.yaml.disabled"
fi

# Disable Kube Proxy
echo "Ensure kube-proxy --cleanup=true flag"
if ! grep -qE -- "--cleanup=true" "$SNAP_DATA/args/kube-proxy"; then
  echo "Adding kube-proxy --cleanup=true flag"
  refresh_opt_in_config "cleanup" "true" kube-proxy
  echo "Restarting kube-proxy"
  restart_service proxy
fi

echo "Enabling Cilium"

# Cilium Supports Arm beginning v1.11.12 and greater
if [ -z "$CILIUM_VERSION" ]; then
  CILIUM_VERSION="v1.14.3"
fi
CILIUM_ERSION=$(echo $CILIUM_VERSION | sed 's/v//g')

if [ -f "${SNAP_COMMON}/plugins/cilium" ]
then
  echo "Cilium version $CILIUM_VERSION is already installed."
else
  CILIUM_DIR="cilium-$CILIUM_ERSION"
  SOURCE_URI="https://github.com/cilium/cilium/archive"
  CILIUM_CNI_CONF="plugins/cilium-cni/05-cilium-cni.conf"
  CILIUM_LABELS="k8s-app=cilium"
  NAMESPACE=kube-system

  echo "Fetching cilium version $CILIUM_VERSION."
  run_with_sudo mkdir -p "${SNAP_DATA}/tmp/cilium"
  (cd "${SNAP_DATA}/tmp/cilium"
  fetch_as $SOURCE_URI/$CILIUM_VERSION.tar.gz "$SNAP_DATA/tmp/cilium/cilium.tar.gz"
  if ! run_with_sudo gzip -f -d "$SNAP_DATA/tmp/cilium/cilium.tar.gz"; then
    echo "Invalid version \"$CILIUM_VERSION\". Must be a branch on https://github.com/cilium/cilium."
    exit 1
  fi
  run_with_sudo tar -xf "$SNAP_DATA/tmp/cilium/cilium.tar" "$CILIUM_DIR/install" "$CILIUM_DIR/$CILIUM_CNI_CONF")

  run_with_sudo mv "$SNAP_DATA/args/cni-network/cni.conf" "$SNAP_DATA/args/cni-network/10-kubenet.conf" 2>/dev/null || true
  run_with_sudo mv "$SNAP_DATA/args/cni-network/flannel.conflist" "$SNAP_DATA/args/cni-network/20-flanneld.conflist" 2>/dev/null || true
  run_with_sudo cp "$SNAP_DATA/tmp/cilium/$CILIUM_DIR/$CILIUM_CNI_CONF" "$SNAP_DATA/args/cni-network/05-cilium-cni.conf"

  if [ -e "${SNAP_DATA}/args/cni-env" ]; then
    source "${SNAP_DATA}/args/cni-env"
  fi

  # Generate the YAMLs for Cilium and apply them
  (cd "${SNAP_DATA}/tmp/cilium/$CILIUM_DIR/install/kubernetes"
  # Add cilium repository
  ${SNAP}/microk8s-helm3.wrapper repo add cilium https://helm.cilium.io/
  ${SNAP}/microk8s-helm3.wrapper install cilium cilium/cilium --version ${CILIUM_VERSION} \
      --namespace $NAMESPACE \
      --set cni.confPath="/var/snap/microk8s/current/args/cni-network" \
      --set cni.binPath="/var/snap/microk8s/current/opt/cni/bin" \
      --set cni.customConf=true \
      --set containerRuntime.integration="containerd" \
      --set global.containerRuntime.socketPath="/var/snap/microk8s/common/run/containerd.sock" \
      --set daemon.runPath="/var/snap/microk8s/current/var/run/cilium" \
      --set operator.replicas=1 \
      --set keepDeprecatedLabels=true \
      --set ipv4NativeRoutingCIDR="${IPv4_CLUSTER_CIDR}" \
      --set ipam.operator.clusterPoolIPv4PodCIDRList[0]="${IPv4_CLUSTER_CIDR}" \
      --set k8sServiceHost="$(hostname -I | awk '{print $1}')" \
      --set k8sServicePort=16443 \
      --set kubeProxyReplacement=strict \
      --set kubeProxyReplacementHealthzBindAddr=0.0.0.0:10256 \
      --set externalIPs.enabled=true \
      --set l2announcements.enabled=true \
      --set loadBalancer.algorithm=maglev \
      --set loadBalancer.mode=dsr \
      --set localRedirectPolicy=true \
      --set securityContext.privileged=true \
      --set tunnel=disabled \
      --set ingressController.enabled=true \
      --set ingressController.enforceHttps=false \
      --set ingressController.loadbalancerMode=shared \
      --set ingressController.default=true \
      --set ingressController.service.type="LoadBalancer" \
      --set nodePort.enabled=true \
      --set annotateK8sNode=true
  )

  ${SNAP}/microk8s-status.wrapper --wait-ready >/dev/null
  echo "Waiting for cilium. This may take several minutes."
  "$SNAP/microk8s-kubectl.wrapper" -n $NAMESPACE rollout status ds/cilium

  # ${SNAP}/microk8s-kubectl.wrapper -n $NAMESPACE apply -f "${SNAP_DATA}/tmp/cilium/$CILIUM_DIR/install/kubernetes/operator/cilium-operator.yaml"

  # Skip installing the Cilium CLI binary if the cluster is in offline mode
  if [[ "$INSTALL_CILIUM_CLI" == "True" ]]; then
    # Fetch the Cilium CLI binary and install
    echo "Installing Cilium CLI binary"
    ARCH=$(arch)
    SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
    run_with_sudo mkdir -p "${SCRIPT_DIR}/cli/"
    fetch_as "https://github.com/cilium/cilium-cli/releases/download/v0.15.11/cilium-linux-${ARCH}.tar.gz" "$SNAP_DATA/tmp/cilium.tar.gz"
    run_with_sudo tar -zxf "$SNAP_DATA/tmp/cilium.tar.gz" -C "${SCRIPT_DIR}/cli"
    run_with_sudo chmod +x "${SCRIPT_DIR}/cli/cilium"
    run_with_sudo cp "${SCRIPT_DIR}/cilium" "${SNAP_COMMON}/plugins/cilium"
    run_with_sudo chmod +x "${SNAP_COMMON}/plugins/cilium"
    echo "Cilium is enabled"
    echo
    echo "You can now enable hubble with:"
    echo "  sudo microk8s cilium hubble enable"
    echo
  else
    echo "Cilium is enabled"
    echo
    echo "You can now enable hubble relay and UI with:"
    echo "  sudo microk8s helm3 upgrade cilium cilium/cilium \\"
    echo "    --version ${CILIUM_VERSION} \\"
    echo "    --namespace ${NAMESPACE} \\"
    echo "    --reuse-values \\"
    echo "    --set hubble.relay.enabled=true \\"
    echo "    --set hubble.ui.enabled=true"
    echo
  fi
fi
